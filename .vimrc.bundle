" ################################
" NeoVundle関連の設定
" ################################

filetype off

if has('vim_starting')
  set rtp+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc()
endif

" ################################
" プラグインリスト
" ################################

" --------------------------------
" github にあるプラグイン
" --------------------------------
NeoBundle 'Shougo/echodoc.git'
NeoBundle 'Shougo/neocomplcache.git'
NeoBundle 'Shougo/neobundle.vim.git'
NeoBundle 'Shougo/unite.vim.git'
NeoBundle 'Shougo/vim-vcs.git'
NeoBundle 'Shougo/vimfiler.git'
NeoBundle 'Shougo/vimshell.git'
NeoBundle 'Shougo/vinarise.git'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/vimproc'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-guicolorscheme'
NeoBundle 'osyo-manga/neocomplcache-clang_complete'
NeoBundle 'ujihisa/vimshell-ssh.git'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'danchoi/ri.vim.git'
NeoBundle 'motemen/git-vim'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-bundler.git'
NeoBundle 'tpope/vim-rake.git'
NeoBundle 'tpope/vim-abolish.git'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'tpope/vim-haml.git'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'vim-scripts/Source-Explorer-srcexpl.vim'
NeoBundle 'vim-scripts/sudo.vim'
NeoBundle 'vim-jp/cpp-vim'
NeoBundle 'benizi/perl-support.vim'
NeoBundle 'petdance/vim-perl'
NeoBundle 'hrsh7th/vim-unite-vcs'
NeoBundle 'c9s/cpan.vim'

" --------------------------------
" www.vim.orgにあるプラグイン
" --------------------------------
NeoBundle 'L9'
NeoBundle 'ZenCoding.vim'
NeoBundle 'guicolorscheme.vim'
NeoBundle 'vimshell-ssh'
NeoBundle 'yanktmp.vim'
NeoBundle 'trinity.vim'
NeoBundle 'taglist.vim'
NeoBundle 'dbext.vim'
" NeoBundle 'smartchr'
" NeoBundle 'open-browser.vim'
" NeoBundle 'Gist.vim'
" NeoBundle 'The-NERD-tree'

" --------------------------------
" それ以外にある gitリポジトリにあるプラグイン
" --------------------------------
NeoBundle 'git://git.wincent.com/command-t.git'
NeoBundle 'git://github.com/msanders/cocoa.vim.git'
" NeoBundle 'git://github.com/scrooloose/nerdcommenter'
" NeoBundle 'git://github.com/scrooloose/nerdtree.git'


filetype plugin on
filetype indent on

" ################################
" 各プラグインに関する設定
" ################################

" --------------------------------
" vim-quickrun
" --------------------------------
nnoremap <Leader>q  <Nop>
nmap     <silent><Leader>qr :w<CR><Plug>(quickrun):copen<CR>
nnoremap <Leader>qR :QuickRun<Space>
" QuickFixバッファを閉じると同時にエラー表示も消す
autocmd MyAutocmd FileType qf nnoremap <buffer><silent> q :q<CR>:HierClear<CR>

" --------------------------------
" git.vim
" --------------------------------
" git add
let g:proj_run1='!git add %f'
let g:proj_run_fold1='*!git add %f'

" git checkout --
let g:proj_run2='!git checkout -- %f'
let g:proj_run_fold2="*!git checkout --%f"

" git status
let g:proj_run3='!git status'

" フォールディングを展開した状態で, プロジェクトを開く
autocmd MyAutocmd BufAdd .vimprojects silent! %foldopen!

" カレントディレクトリにプロジェクト管理ファイルがあったら読み込む
if getcwd() != $HOME
    if filereadable(getcwd(). '/.vimprojects')
        Project .vimprojects
    endif
endif

" --------------------------------
" vim-ruby
" --------------------------------
" <C-Space>でomni補完
imap <C-Space> <C-x><C-o>

" --------------------------------
" rails.vim
" --------------------------------
" Rubyのオムニ補完を設定(ft-ruby-omni)
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

autocmd User Rails.controller* Rnavcommand api app/controllers/api -glob=**/* -suffix=_controller.rb
autocmd User Rails.controller* Rnavcommand tmpl app/controllers/tmpl -glob=**/* -suffix=_controller.rb
autocmd User Rails Rnavcommand config config   -glob=*.*  -suffix= -default=routes.rb
autocmd User Rails nnoremap :<C-u>Rcontroller :<C-u>Rc
autocmd User Rails nnoremap :<C-u>Rmodel :<C-u>Rm
autocmd User Rails nnoremap :<C-u>Rview :<C-u>Rv

" --------------------------------
" neocomplcache
" --------------------------------
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_auto_completion_start_length = 3

""""" yanktmp.vim """""
" map <silent> sy :call YanktmpYank()<CR>
" map <silent> sp :call YanktmpPaste_p()<CR>
" map <silent> sP :call YanktmpPaste_P()<CR>
" if has("win32")
"     let g:yanktmp_file = $TEMP. '/vimyanktmp'
" endif

"""""" smartchr """""
" inoremap <expr> = smartchr#loop(' = ', '=', ' == ')
" inoremap <expr> , smartchr#one_of(', ', ',')
"cnoremap <expr> / smartchr#loop('/', '~/', '//', {'ctype': ':'})

" --------------------------------
" unite.vim
" --------------------------------
" insertモードをデフォルトに
let g:unite_enable_start_insert = 1
" 無指定にすることで高速化
let g:unite_source_file_mru_filename_format = ''
" most recently used のリストサイズ
let g:unite_source_file_mru_limit = 100
" Unite起動時のウィンドウ分割
let g:unite_split_rule = 'rightbelow'
" unite-grep で使うコマンド
let g:unite_source_grep_default_opts = "-Hn --color=never"

nnoremap  [unite] <Nop>
nmap      f       [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>
" 最近使用したファイル一覧
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
" ファイル一覧
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
" バッファ一覧
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
" 常用セット
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
" 現在のバッファのカレントディレクトリからファイル一覧
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>
" grep検索
nnoremap <silent>[unite]G :<C-u>Unite -no-start-insert grep<CR>
" Uniteバッファの復元
nnoremap <silent>[unite]r :<C-u>UniteResume<CR>
" バッファ全体
nnoremap <silent>[unite]L :<C-u>Unite line<CR>

augroup UniteMapping
  autocmd!
  "insertモード時はC-gでいつでもバッファを閉じられる（絞り込み欄が空の時はC-hでもOK）
  autocmd FileType unite imap <buffer><C-g> <Plug>(unite_exit)
  " <Space> だと待ち時間が発生してしまうので <Space><Space> を割り当て
  autocmd FileType unite nmap <buffer><Space><Space> <Plug>(unite_toggle_mark_current_candidate)
  " q だと待ち時間が発生してしまうので
  autocmd FileType unite nmap <buffer><C-g> <Plug>(unite_exit)
  "直前のパス削除
  autocmd FileType unite imap <buffer><C-w> <Plug>(unite_delete_backward_path)
  autocmd FileType unite nmap <buffer>h <Plug>(unite_delete_backward_path)
  "ファイル上にカーソルがある時，pでプレビューを見る
  autocmd FileType unite inoremap <buffer><expr>p unite#smart_map("p", unite#do_action('preview'))
  "C-xでクイックマッチ
  autocmd FileType unite imap <buffer><C-x> <Plug>(unite_quick_match_default_action)
  "lでデフォルトアクションを実行
  autocmd FileType unite nmap <buffer>l <Plug>(unite_do_default_action)
  autocmd FileType unite imap <buffer><expr>l unite#smart_map("l", unite#do_action(unite#get_current_unite().context.default_action))

  " autocmd FileType unite imap <buffer><C-w> <Plug>(neocomplcache_start_unite_complete)
augroup END

autocmd MyAutocmd FileType unite call s:unite_my_settings()

function! s:unite_my_settings()"
  " Overwrite settings.

  " ESCキーを2回押すと終了する
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj  <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

  " ウィンドウを分割して開く
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " ウィンドウを縦に分割して開く
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"


" --------------------------------
" vimfiler
" --------------------------------
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_split_command = 'vertical rightbelow vsplit'
let g:vimfiler_execute_file_list = { 'c' : 'vim', 'h' : 'vim', 'cpp' : 'vim', 'hpp' : 'vim', 'cc' : 'vim', 'rb' : 'vim', 'pl' : 'vim', 'pm' : 'vim', 'txt' : 'vim', 'pdf' : 'open', 'vim' : 'vim' }


autocmd! FileType vimfiler call g:my_vimfiler_settings()
function! g:my_vimfiler_settings()
  nmap     <buffer><expr><Cr> vimfiler#smart_cursor_map("
  nnoremap <buffer>s          :call vimfiler#mappings#do_action('my_split')<Cr>
  nnoremap <buffer>v          :call vimfiler#mappings#do_action('my_vsplit')<Cr>
endfunction

augroup VimFilerMapping
  autocmd!
  autocmd FileType vimfiler nmap <buffer><silent><expr> e vimfiler#smart_cursor_map(
        \   "\<Plug>(vimfiler_cd_file)",
        \   "\<Plug>(vimfiler_edit_file)",
        \   "\<Plug>(vimfiler_expand_tree)",
        \   "\<Plug>(vimfiler_edit_file)")
  autocmd FileType vimfiler nmap <buffer><silent>x <Plug>(vimfiler_hide)
augroup END
nnoremap <Leader>f        <Nop>
nnoremap <Leader>ff       :<C-u>VimFiler<CR>
nnoremap <Leader>fnq      :<C-u>VimFiler -no-quit<CR>
nnoremap <Leader>fh       :<C-u>VimFiler ~<CR>
" Explorer仕様
nnoremap <Leader>fe       :<C-u>VimFiler -buffer-name=explorer -split -ainsize=45 -toggle -no-quit<CR>
nnoremap <Leader>fc       :<C-u>VimFilerCurrentDir<CR>
nnoremap <Leader>fb       :<C-u>VimFilerBufferDir<CR>
" nnoremap <silent><expr><Leader>fg ":\<C-u>VimFiler " . <SID>git_root_dir( . '\<CR>'
" nnoremap <silent><expr><Leader>fe ":\<C-u>VimFilerExplorer " . <SID>git_root_dir( . '\<CR>')


" --------------------------------
" vimshell
" --------------------------------
let g:vimshell_user_prompt  =  'getcwd()'
let g:vimshell_disable_escape_highlight = 1

" --------------------------------
" srcexpl
" --------------------------------
" Previewを自動表示する
let g:SrcExpl_RefreshTime = 1

" tagsを自動生成
let g:SrcExpl_UpdateTags = 1

" --------------------------------
" vim-unite-vcs
" --------------------------------
nnoremap  [vcs] <Nop>
nmap      fv    [vcs]

nnoremap [vcs]l  :<C-u>Unite vcs/log<CR>
nnoremap [vcs]s  :<C-u>Unite vcs/status<CR>
nnoremap [vcs]r  :<C-u>Unite vcs/file_rec<CR>
